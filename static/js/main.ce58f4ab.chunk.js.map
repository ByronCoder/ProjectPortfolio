{"version":3,"sources":["mypic.jpeg","components/ProjectsTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProjectsTable","props","state","projectsList","fetch","then","response","json","data","setState","className","this","map","proj","key","id","title","description","href","sourceLink","demoLink","React","Component","App","Navbar","fixed","icon","faCode","size","color","Brand","Nav","Link","Image","src","logo","alt","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,oC,8PCkD5BC,E,YA5Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,aAAc,IAFZ,E,iFAKE,IAAD,OAChBC,MAAM,2EACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAACN,aAAcK,S,+BAKnC,OACE,yBAAKE,UAAU,OACX,2BAAOA,UAAU,oBACf,+BACE,4BACI,4CACA,2CACA,sCACA,sCAGP,+BACIC,KAAKT,MAAMC,aAAaS,KAAI,SAACC,GAAD,OAC3B,wBAAIC,IAAKD,EAAKE,IACV,4BAAKF,EAAKG,OACV,4BAAKH,EAAKI,aACV,4BAAI,uBAAGC,KAAML,EAAKM,YAAd,eACJ,4BAAI,uBAAGD,KAAML,EAAKO,UAAd,0B,GAhCIC,IAAMC,WC0CnBC,MArCf,WACE,OACE,yBAAKb,UAAU,OAGT,kBAACc,EAAA,EAAD,CAAQd,UAAU,SAASe,MAAM,OACjC,kBAAC,IAAD,CAAiBC,KAAMC,IAAQC,KAAK,KAAKC,MAAM,UAC/C,kBAACL,EAAA,EAAOM,MAAR,CAAcpB,UAAU,YAAYQ,KAAK,SAAzC,2BACE,kBAACa,EAAA,EAAD,CAAKrB,UAAU,sBACX,kBAACqB,EAAA,EAAIC,KAAL,CAAUd,KAAK,cAAf,aACA,kBAACa,EAAA,EAAIC,KAAL,CAAUd,KAAK,UAAf,SACA,kBAACa,EAAA,EAAIC,KAAL,CAAUd,KAAK,YAAf,aAIN,4BAAQR,UAAU,oCAChB,uDACA,kBAACuB,EAAA,EAAD,CAAOC,IAAKC,IAAMC,IAAI,GAAG1B,UAAU,iCACnC,uBAAG2B,MAAM,+CAAT,kBAEF,6BAAS3B,UAAU,eAAeK,GAAG,SACnC,qCACA,4LAGF,6BAASL,UAAU,eAAeK,GAAG,aACnC,yCACA,yBAAKL,UAAU,WACb,kBAAC,EAAD,UC1BM4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.ce58f4ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mypic.9c1e251e.jpeg\";","\r\nimport React from 'react';\r\nimport '../../src/App.css';\r\n\r\n\r\nclass ProjectsTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { projectsList: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n      fetch('https://p7zlxmo2qk.execute-api.us-east-1.amazonaws.com/dev/api/Projects')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n          this.setState({projectsList: data})\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"row\">\r\n          <table className=\"table table-dark\">\r\n            <thead>\r\n              <tr>\r\n                  <th>Project Name</th>\r\n                  <th>Description</th>\r\n                  <th>Source</th>\r\n                  <th>Demo</th>\r\n              </tr>\r\n            </thead>\r\n           <tbody>\r\n              {this.state.projectsList.map((proj) => \r\n                <tr key={proj.id}>\r\n                    <td>{proj.title}</td>\r\n                    <td>{proj.description}</td>\r\n                    <td><a href={proj.sourceLink}>Click Here</a></td>\r\n                    <td><a href={proj.demoLink}>Click Here</a></td>\r\n                </tr>\r\n          \r\n              )}\r\n           </tbody>\r\n              \r\n          </table>\r\n        \r\n        </div>\r\n    \r\n    ) \r\n  }\r\n}\r\nexport default ProjectsTable\r\n","import React from 'react';\nimport {Nav, Navbar, Image} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCode } from '@fortawesome/free-solid-svg-icons'\n\nimport './App.css';\nimport logo from './mypic.jpeg';\nimport ProjectsTable from \"./components/ProjectsTable\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n        \n          <Navbar className=\"navbar\" fixed=\"top\">\n          <FontAwesomeIcon icon={faCode} size=\"2x\" color=\"white\"/>\n          <Navbar.Brand className=\"nav-brand\" href=\"#home\">Byron Blank's Portfolio</Navbar.Brand>\n            <Nav className=\"navbar-nav mx-auto\">\n                <Nav.Link href=\"#portfolio\">Portfolio</Nav.Link>\n                <Nav.Link href=\"#about\">About</Nav.Link>\n                <Nav.Link href=\"#contact\">Contact</Nav.Link>\n            </Nav>\n          </Navbar>\n\n          <header className=\"jumbotron text-black text-center\">\n            <h1>Byron Blank's Portfolio</h1>\n            <Image src={logo} alt=\"\" className=\"portfolio-img rounded-circle\" />\n            <p class=\"jumbotron-subheading font-weight-light mb-0\">Web Developer</p>\n          </header>\n          <section className=\"page-section\" id=\"about\">\n            <h2>About</h2>\n            <p>Hello, my name is Byron Blank and I am a web developer. You can find the projects in my portfolio below along with links to a demo and the source on GitHub.</p>\n          </section>\n         \n          <section className=\"page-section\" id=\"portfolio\">\n            <h2>Portfolio</h2>\n            <div className=\"portDiv\">\n              <ProjectsTable />\n            </div>\n              \n          </section>\n      </div>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}